<article
  class="p-2 flex flex-col h-44 relative"
  id="product-card-form-{{ product.id }}"
>
  <span>
    <h3 class="font-medium">
      <a href="{{ product.url | within: collection }}">
        {% assign title = product.title | split: ',' %}
        {{ title[0] | upcase | truncate: 30 }}
      </a>
    </h3>

    <p class="my-2 font-medium">{{ product.price | money }}</p>
  </span>

  <form>
    <ul
      v-for="(option, optionIndex) in form.options"
      :key="variantId + '-' + option.name"
    >
      {% render 'product-card-select-option' %}
    </ul>
    <button
      class="
        px-4
        py-2
        border border-gray-700
        bg-gray-700
        text-white
        hover:bg-transparent hover:text-gray-700
        transition-all
        absolute
        bottom-1
        right-1
        text-sm
      "
      @click="addToCart"
    >
      Add to cart
    </button>
  </form>
</article>

<script>
  if (document.querySelector("#product-card-form-{{ product.id }}")) {
    const productCardForm = Vue.createApp({
      delimiters: ["${", "}"],
      data() {
        return {
          variantsMap: {}, //map variant title to variant id
          form: {
            options: [],
            selected: {},
          },
        };
      },
      created() {
        store.getProductData("{{ product.handle }}").then((data) => {
          //map option to variant id
          data.variants.map(
            (variant) => (this.variantsMap[variant.title] = variant.id)
          );
          //map product options to form
          data.options.forEach((option) => {
            this.form.options.push({
              ...option,
              visible: false,
            });
            // sets the default selected option for each option
            this.form.selected[option.name] = option.values[0];
          });
          console.log(this.form);
        });
      },
      computed: {
        variantId() {
          //generate the variant title for lookup in the variantsMap
          const variantTitle = Object.values(this.form.selected).reduce(
            (acc, selection) => acc + " / " + selection
          );
          return this.variantsMap[variantTitle];
        },
      },
      methods: {
        async addToCart(event) {
          event.preventDefault();

          const data = {
            id: this.variantId,
            quantity: 1,
          };

          store.addToCart(data);
        },
        toggleOptionsList(option) {
          option.visible = !option.visible;
        },
        updateSelected(option, value) {
          console.log("updating");
          this.form.selected[option.name] = value;
          option.visible = false;
        },
        isSelected(option, value) {
          return this.form.selected[option.name] === value;
        },
        closeAllOptions() {
          this.form.options.forEach((option) => (option.visible = false));
        },
      },
    }).mount("#product-card-form-{{ product.id }}");
  }
</script>

<style scoped>
  .selected-option {
    text-decoration: line-through;
  }
</style>
